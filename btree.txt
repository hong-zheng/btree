#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
// https://github.com/hong-zheng/btree.git
// 1:36

typedef char BTDataType;
typedef struct BinaryTreeNode
{
	BTDataType _data;
	struct BinaryTreeNode* _left;
	struct BinaryTreeNode* _right;
}BTNode;
//// 通过前序遍历的数组"ABD##E#H##CF##G##"构建二叉树
BTNode* BinaryTreeCreate(BTDataType* a, int* pi){
	if (a[*pi] != '#'){
		BTNode* root = (BTNode*)malloc(sizeof(BTNode));
		root->_data = a[*pi];
		++(*pi);
		root->_left = BinaryTreeCreate(a, pi);
		++(*pi);
		root->_right = BinaryTreeCreate(a, pi);
		return root;
	}
	else{
		return NULL;
	}
}

//// 二叉树销毁
// 一级指针不可以改变内存中的内容 ， 在main函数中的局部变量就是一级指针，因此需要用二级指针
void BinaryTreeDestory(BTNode** root){ 
	BTNode* cur = *root;
	if (cur){
		BinaryTreeDestory(&cur->_left);
		BinaryTreeDestory(&cur->_right);
		// 释放当前节点
		free(cur);
		// 改变根节点指向
		*root = NULL;// 此处如果写 cur=NULL,并不等价，这是一个局部变量，不会改变根的指向
	}
}

// 二叉树节点个数
// 遍历，累加计数器
int BinaryTreeCount(BTNode* root, int* num){
	if (root){
		++(*num);
		BinaryTreeCount(root->_left, num);
		BinaryTreeCount(root->_right, num);
	}
}
int BinaryTreeSize(BTNode* root){
	if ( NULL == root){
		return 0;
	}
	return BinaryTreeSize(root->_left) + BinaryTreeSize(root->_right)+1;
}

// 二叉树叶子节点个数
void BinaryTreeLeafSize(BTNode* root,int* num){
	if (NULL == root){
		return 0;
	}
	BinaryTreeLeafSize(root->_left,num);
	BinaryTreeLeafSize(root->_right,num);
	if (root->_left == root->_right && root->_left == NULL){
		++(*num);
		return;
	}
}
int BinaryTreeLeafCount(BTNode* root){
	// 空节点
	if (NULL == root){
		return 0;
	}
	// 叶子节点
	if (root->_left == NULL && root->_right == NULL){
		return 1;
	}
	// 当前节点的叶子节点为起左右孩子的叶子节点之和
	return BinaryTreeLeafCount(root->_left) + BinaryTreeLeafCount(root->_right);
}

// 二叉树第k层节点个数
// 左右子树的第 k-1 层节点的个数和
int BinaryTreeLevelKSize(BTNode* root, int k){
	// 当前位置为NULL
	if (NULL == root){
		return 0;
	}
	// 到了当前层次
	if (k == 1){
		return 1;
	}
	// 满足当前节点条件的左右之和
	return BinaryTreeLevelKSize(root->_left, k - 1)
	      +BinaryTreeLevelKSize(root->_right, k - 1);
}

// 二叉树查找值为x的节点
BTNode* BinaryTreeFind(BTNode* root, BTDataType x){
	if (NULL == root){
		return NULL;
	}
	// 当前节点
	if (root->_data == x){
		return root;
	}
	// 左右子树

	// 左边找到就返回
	BTNode* ret = BinaryTreeFind(root->_left,x);
	if (ret){
		return ret;
	}
	// 左边没找到，就找右边，找到与否直接返回
	return BinaryTreeFind(root->_right,x);
}

// 层序遍历
// 野路子，先先序后层序出列
void BinaryTreeLevelOrder(BTNode* root){
	if ( root == NULL){
		return;
	}
	printf("%c \n",root->_data);
	BinaryTreeLevelOrder(root->_left);
	BinaryTreeLevelOrder(root->_right);
}
//// 判断二叉树是否是完全二叉树
//int BinaryTreeComplete(BTNode* root);

int main(){

	char str[] = { "ABD##E#H##CF##G##"};
	int indx = 0;
	BTNode* root = BinaryTreeCreate(str,&indx);
	printf("%d\n",BinaryTreeSize(root));
	int num = 0;
	BinaryTreeLeafSize(root,&num);
	printf("%d\n",num);
	printf("%d\n", BinaryTreeLeafCount(root));
	printf("%d\n", BinaryTreeLevelKSize(root, 2));

	BTNode* node = BinaryTreeFind(root, 'A');
	if (node){
		printf("%c\n", node->_data);
	}

	BinaryTreeDestory(&root);

	system("pause");
	return 0;
}